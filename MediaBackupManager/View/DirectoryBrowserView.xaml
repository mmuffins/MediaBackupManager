<UserControl x:Class="MediaBackupManager.View.DirectoryBrowserView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MediaBackupManager.View"
             xmlns:viewmodel="clr-namespace:MediaBackupManager.ViewModel"
             mc:Ignorable="d" 
             d:DesignHeight="50" d:DesignWidth="100" 
             Unloaded="UserControl_Unloaded">
    <Control.Resources>
        <!--Converters-->
        <local:ByteToHumanReadableConverter x:Key="ByteToHuman" />
        <local:TypeToStringConverter x:Key="TypeToString" />
        <!--Treeview Resources-->

        <!--Highlight files with backup count of 1-->
        <Style TargetType="TreeViewItem" x:Key="MissingBackupColor">
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=HasMultipleBackups}" Value="False" />
                        <Condition Binding="{Binding 
                            RelativeSource={RelativeSource FindAncestor, 
                            AncestorType={x:Type UserControl}}, 
                            Path=DataContext.HighlightMissingBackupFiles }" 
                                   Value="True" />
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="Foreground" Value="Red" />
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>

        <!--GridView Resources-->
        <Style TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="HorizontalContentAlignment" Value="Left" />
        </Style>
        <Style TargetType="{x:Type ListViewItem}">
            <EventSetter Event="MouseDoubleClick" Handler="GridFiles_MouseDoubleClick" />
            <Style.Triggers>
                <!--Highlight items with backup count of 1 if HighlightmissingBackupFiles is checked-->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=HasMultipleBackups}" Value="False" />
                        <Condition Binding="{Binding 
                            RelativeSource={RelativeSource FindAncestor, 
                            AncestorType={x:Type UserControl}}, 
                            Path=DataContext.HighlightMissingBackupFiles }" 
                                   Value="True" />
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="Foreground" Value="Red" />
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>
                <!--Different highlight for Directories-->
                <DataTrigger Binding="{Binding Path=. , Converter={StaticResource TypeToString}}"  Value="{x:Type viewmodel:FileDirectoryViewModel}">
                    <Setter Property="Background" Value="LightGray" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <!--Compositecollections don't have support for sorting/filtering, use workaround instead-->
        <!--<CollectionViewSource x:Key="DirectoryFileNodes" Source="{Binding Path=CurrentDirectory.FileNodes}"/>
        <CollectionViewSource x:Key="DirectorySubDirs" Source="{Binding Path=CurrentDirectory.SubDirectories}"/>
        <CompositeCollection x:Key="CombinedCollection">
            <CollectionContainer Collection="{Binding Source={StaticResource DirectorySubDirs}}" />
            <CollectionContainer Collection="{Binding Source={StaticResource DirectoryFileNodes}}" />
        </CompositeCollection>-->

    </Control.Resources>
    
    <Grid x:Name="LayoutRoot" Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="20" />
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition MinWidth="50" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!--Command Bar-->
        <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Orientation="Horizontal">
            <Button x:Name="btnShowBackupSetView" Content="Home" Command="{Binding ShowBackupSetOverviewCommand}" Style="{DynamicResource HeaderButton}"  />
            <!--<Button x:Name="btnShowExclusionList" Content="File Exclusions" Command="{Binding ShowExclusionOverlayCommand}" Style="{DynamicResource HeaderButton}" />-->
            <!--<Button x:Name="btnClearData" Content="Clear" Command="{Binding ClearDataCommand}" Style="{DynamicResource HeaderButton}" />
            <Button x:Name="btnLoadData" Content="Load DB" Command="{Binding LoadData}" Style="{DynamicResource HeaderButton}" />
            <Button x:Name="btnScanFiles" Content="Scan Test 1" Command="{Binding LoadAdditionalData}" Style="{DynamicResource HeaderButton}" />
            <Button x:Name="btnScanAdditional" Content="Scan Test 2" Command="{Binding ScanNewData}" Style="{DynamicResource HeaderButton}" />
            <Button x:Name="btnDeleteAdditional" Content="Delete Test 2" Command="{Binding RemoveNewData}" Style="{DynamicResource HeaderButton}" />
            <Button x:Name="btnCreateBackupSet" Content="Index Directory" Command="{Binding ShowCreateBackupSetViewCommand}" Style="{DynamicResource HeaderButton}" />
            <Button x:Name="btnRemoveBackupSet" Content="Remove Directory" Command="{Binding RemoveBackupSetCommand}" Style="{DynamicResource HeaderButton}" />-->
        </StackPanel>




        <!--Directory Tree-->
        <CheckBox x:Name="ToggleTreeViewHighlights" Grid.Row="1" Grid.Column="0"  Content="Show files without backup" 
                  IsChecked="{Binding HighlightMissingBackupFiles}" />
        <TreeView x:Name="treeDirectory" Grid.Row="2"  Grid.Column="0" Margin="2" MinWidth="50"
                  ItemsSource="{Binding Path=Index.BackupSets}"
                  SelectedItemChanged="treeDirectory_SelectedItemChanged" >
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate DataType="{x:Type viewmodel:FileDirectoryViewModel}" 
                                          ItemsSource="{Binding RootDirectory.SubDirectories}">
                    <TextBlock Text="{Binding Label}" />
                    <HierarchicalDataTemplate.ItemTemplate>
                        <HierarchicalDataTemplate DataType="{x:Type viewmodel:FileDirectoryViewModel}" 
                                          ItemsSource="{Binding SubDirectories}">
                            <TextBlock Text="{Binding Name}" />
                        </HierarchicalDataTemplate>
                    </HierarchicalDataTemplate.ItemTemplate>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
            <TreeView.ItemContainerStyle>
                <Style TargetType="{x:Type TreeViewItem}">
                    <Setter Property="IsExpanded" Value="{Binding TreeViewIsExpanded, Mode=TwoWay}" />
                    <Setter Property="IsSelected" Value="{Binding TreeViewIsSelected, Mode=TwoWay}" />
                    <Style.Resources>
                        <Style TargetType="{x:Type Border}">
                            <Setter Property="Grid.ColumnSpan" Value="2" />
                        </Style>
                    </Style.Resources>
                </Style>
            </TreeView.ItemContainerStyle>
        </TreeView>

        <GridSplitter Grid.Row="2" Grid.Column="1" HorizontalAlignment="Stretch"  Background="Transparent"/>

        <DockPanel Grid.Row="1" Grid.Column="2">
            <!--Breadcrumb Navigation-->
            <ItemsControl DockPanel.Dock="Left" 
                          ItemsSource="{Binding Path=CurrentDirectory.BreadCrumbList}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <DataTemplate.Resources>
                            <Style TargetType="{x:Type StackPanel}">
                                <EventSetter Event="MouseUp" Handler="BreadcrumbBar_MouseUp" />
                            </Style>
                        </DataTemplate.Resources>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text=">" />
                            <TextBlock Text="{Binding Path=Name}" />
                        </StackPanel>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <!--File Search-->
            <TextBox DockPanel.Dock="Right" 
                     Text="{Binding SearchBarText, Delay=200, UpdateSourceTrigger=PropertyChanged}"></TextBox>
        </DockPanel>
        <ListView Grid.Row="2" Grid.Column="2" x:Name="gridFiles" Margin="2"
                  SelectedItem="{Binding Path=SelectedFileGridItem}" 
                  GridViewColumnHeader.Click="GridViewColumnHeaderClickedHandler">
            <ListView.Style>
                <Style TargetType="ListView">
                    <Setter Property="ItemsSource" Value="{Binding Path=CurrentDirectory.ChildElements}" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ShowSearchResults}" Value="True">
                            <Setter Property="ItemsSource" Value="{Binding SearchResults}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ListView.Style>
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="Name" DisplayMemberBinding="{Binding Name}" />
                    <GridViewColumn Header="Extension" DisplayMemberBinding="{Binding Extension}" />
                    <GridViewColumn Header="Checksum" DisplayMemberBinding="{Binding Checksum}" />
                    <GridViewColumn Header="Directory" DisplayMemberBinding="{Binding FullName}" />
                    <GridViewColumn Header="Backup Status" DisplayMemberBinding="{Binding BackupStatus}" />
                    <GridViewColumn Header="Backup Count" DisplayMemberBinding="{Binding Path=Hash.BackupCount}" />
                    <GridViewColumn Header="Node Count" DisplayMemberBinding="{Binding Path=Hash.NodeCount}" />
                    <GridViewColumn Header="Length" DisplayMemberBinding="{Binding Path=Hash.Length, Converter={StaticResource ByteToHuman}}" />
                    <GridViewColumn Header="Creation Time" DisplayMemberBinding="{Binding Path=Hash.CreationTime}" />
                    <GridViewColumn Header="Last Write Time" DisplayMemberBinding="{Binding Path=Hash.LastWriteTime}" />
                </GridView>
            </ListView.View>
        </ListView>
    </Grid>
</UserControl>
